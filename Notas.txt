Variables:
    Pueden contener mayúsculas, minusculas

    Hacen los programas más comprensibles.
    Son simplemente nombres que apuntan a un valor.

Cadenas y entradas:
    Son secuencia de caracteres.
    Los objetos de
Entradas:
     Python tiene la funcion input para recibir datos del usuario del programa.
     Input siempre regresa cadenas, por lo que si queremos utilizar otro tipo, tenemos que hacer type casting.


Interaciones (loops)
    La mayoria de la tareas computacionales nose pueden lograr con ramificaciones.
    Cuando queremos que un programa haga lo mismo varias veces, utilizamos interaciones.
    Se pueden escribir interaciones dentro de interaciones.
    Podemos utilizar break para salir anticipadamente de una iteración.
    Tener cuidado de interaciones infinitas.

Bucle FOR
    iterable es una colección de objetos
    variable es un elemento especifico que se esta exponiendo meiante el bucle en cada interación.

Iterables:
En Python, un iterable es un objeto que se puede utilizar en un bucle definido.
Si un objeto es iterable significa que se puede pasar como argumento a la función iter.
El iterable que se pasa como parámetro a la función iter.

iter('cadena') # cadena
iter(['a','b','c']) # lista
iter(('a','b','c')) # tupla
iter({'a','b','c'}) # conjunto
iter({'a':1,'b':2,'c':3}) #Diccionario

Todas las llamadas anteriores regresan un objeto de tipo iterado.
¿Qué pasa si la pasamos a la función iter a un objeto que no es iterable?
Obtendremos un TypeError que señala que el objeto no es un iterable.
Esto es un ejemplo de programación defensiva en el que python verifica el tipo del objeto antes de proceder al cómputo.


Busqueda Binaria:
La busqueda Binaria es un algoritmo eficiente para encontrar un eemento en
una lista ordenada de elementos. Funciona al dividir repetidamente a la mitad.
la porcion de la lista que podría contener al elemento, hasta reducir las 
ubicaciones posibles a solo una. Usamos la búsqueda binaria en el juego de adivinar
en la leccion introructoria.

Una de las maneras mas comunes de usar la busqueda binaria es para encontrar un elemento en un arreglo.

Funciones y abstraccion.

Decomposición
    Permite dividir el código en componentes que colaboran con un fin en común.
    Se puede pensar como mini programas dentro de un programa mayoria

Funciones:
definicion en Python:

def <nombre>(<parametros):
    <cuerpo>
    return <expresion>

Ejemplo:

def suma(a,b):
    total = a +b
    return total
//para ejecutar
suma(2,3)

Argumentos de tipo keyword y valores por defecto.

Recursividad:
La recursividad es una caracteristica de los lenguajes de programación que permite que un subprograma se invoque a si mismo.
La recursividad es util para resolver problemas definibles en sus propios terminos.
La recursividad es, en cierta medida, análoga al principio de inducción.
- Algoritmica: Una forma de crear soluciones utilizando el principio de divide y venceras.
- Programática: Una técnica programática mediante la cual una función se llma así misma.

Funciones como objetos:

Una de las caracteristicas más poderosas de python es que todo es un objeto, incluyendo las funciones. Las funciones en Python son 
"ciudadanos de primera clase".

Esto, en sentido amplio, significa que en Python las funciones:

    - Tienen un tipo
    - Se pueden pasar como argumento de otras funciones
    - Se pueden utilizar en expresiones.
    - Se puede incluir en varias estructuras de datos (como listas, tuplas, diccionarios, etc.)

Funciones en expresiones:

Una forma de definir una función en una expresión es utilizando el keyword lambda. lambda tiene la siguiente sintaxis: lambda: .

Ejemplo:
sumar = lambda x, y: x + y

sumar(2, 3)

5

Funciones en estructuras de datos:

Las funciones tambien se pueden incluir en diversas estructuras que las permiten almacenar. Por ejemplo, una lista que puede guardar diversas
funciones a aplicar o un diccionario las puede almacenar como valores.

MODULO 5
TIPOS ESTRUCTURADOS, MUTABILIDAD Y FUNCIONES DE ALTO NIVEL.

TUPLAS:



